'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var jsonld = _interopDefault(require('jsonld'));

var CheckResult = function CheckResult(ok, type, details) {
  if (type === void 0) {
    type = '';
  }

  if (details === void 0) {
    details = '';
  }

  this.ok = ok;
  this.error = {
    type: type,
    details: details
  };
};

// A type of promise-like that resolves synchronously and supports only one observer

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var CONTEXTS = {}; // From https://github.com/flexdinesh/browser-or-node/blob/master/src/index.js

var isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
var nodeDocumentLoader = isNode ? /*#__PURE__*/jsonld.documentLoaders.node() : /*#__PURE__*/jsonld.documentLoaders.xhr(); // change the default document loader

var defaultLoader = function defaultLoader(url) {
  try {
    if (url in CONTEXTS) {
      return Promise.resolve({
        contextUrl: null,
        document: CONTEXTS[url],
        documentUrl: url
      });
    }

    return Promise.resolve(nodeDocumentLoader(url)).then(function (res) {
      CONTEXTS[url] = res.document;
      return res;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var isNotJsonLdPropery = function isNotJsonLdPropery(property) {
  return !['@id', '@type'].includes(property);
};

var check = function check(jsonldDocument, documentLoader) {
  if (documentLoader === void 0) {
    documentLoader = defaultLoader;
  }

  try {
    return Promise.resolve(_catch(function () {
      var jsonldDoc;

      if (typeof jsonldDocument === 'string') {
        jsonldDoc = JSON.parse(jsonldDocument);
      } else {
        jsonldDoc = jsonldDocument;
      } // Remove all keys not present in the jsonld context


      return Promise.resolve(jsonld.expand(jsonldDoc, {
        documentLoader: documentLoader
      })).then(function (expanded) {
        return Promise.resolve(jsonld.compact(expanded, jsonldDoc['@context'], {
          documentLoader: documentLoader
        })).then(function (compacted) {
          // Check which keys have been removed
          var keys = Object.keys(jsonldDoc).filter(isNotJsonLdPropery);
          var newKeysSet = new Set(Object.keys(compacted));
          var difference = keys.filter(function (key) {
            return !newKeysSet.has(key);
          });
          return difference.length === 0 ? new CheckResult(true) : new CheckResult(false, 'MISSING_PROPERTIES_IN_CONTEXT', JSON.stringify(difference));
        });
      });
    }, function (err) {
      return new CheckResult(false, err.name, err.message);
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};

var fetch = /*#__PURE__*/require('node-fetch');

var githubApi = function githubApi(endpoint) {
  try {
    return Promise.resolve(fetch("https://api.github.com/repos/" + endpoint).then(function (res) {
      return res.json();
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};

var getFiles = function getFiles(user, repo, ref) {
  if (ref === void 0) {
    ref = 'HEAD';
  }

  try {
    return Promise.resolve(githubApi(user + "/" + repo + "/git/trees/" + ref + "?recursive=1")).then(function (all) {
      var files = all.tree.filter(function (node) {
        return node.type === 'blob';
      });
      return files;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var getAllOpenBrackets = function getAllOpenBrackets(text) {
  var results = [];

  for (var cursor = 0; cursor < text.length; cursor += 1) {
    if (text[cursor] === '{') {
      results.push(cursor);
    }
  }

  return results;
};

var getStringUntilMatchingBracket = function getStringUntilMatchingBracket(text, openBracketIndex) {
  var substring = text[openBracketIndex];

  if (substring !== '{') {
    throw new Error('start must be the index of an opening bracket');
  }

  var bracketCount = 1;
  var cursor = openBracketIndex + 1;
  var length = text.length;

  while (bracketCount !== 0 && cursor < length) {
    var currentChar = text[cursor];

    if (currentChar === '{') {
      bracketCount += 1;
    } else if (currentChar === '}') {
      bracketCount -= 1;
    }

    cursor += 1;
    substring += currentChar;
  }

  try {
    return JSON.parse(substring);
  } catch (e) {
    return null;
  }
};

var getAllJsonFromString = function getAllJsonFromString(text) {
  var openBrackets = getAllOpenBrackets(text);
  return openBrackets.map(function (openBracketIndex) {
    return getStringUntilMatchingBracket(text, openBracketIndex);
  }).filter(Boolean);
};

var isJsonLdObject = function isJsonLdObject(obj) {
  return '@context' in obj;
};

var getAllJsonLdFromString = function getAllJsonLdFromString(text) {
  return getAllJsonFromString(text).filter(function (obj) {
    return isJsonLdObject(obj);
  });
};

exports.CheckResult = CheckResult;
exports.check = check;
exports.defaultDocumentLoader = defaultLoader;
exports.getAllJsonFromString = getAllJsonFromString;
exports.getAllJsonLdFromString = getAllJsonLdFromString;
exports.getFiles = getFiles;
exports.isJsonLdObject = isJsonLdObject;
//# sourceMappingURL=jsonld-checker.cjs.development.js.map
