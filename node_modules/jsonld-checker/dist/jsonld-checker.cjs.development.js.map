{"version":3,"file":"jsonld-checker.cjs.development.js","sources":["../src/CheckResult.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/defaultDocumentLoader.ts","../src/check.ts","../src/github.ts","../src/utils.ts"],"sourcesContent":["class CheckResult {\n  ok: boolean;\n\n  error?: {\n    type: string;\n    details: string;\n  };\n\n  constructor(ok: boolean, type = '', details = '') {\n    this.ok = ok;\n    this.error = {\n      type,\n      details,\n    };\n  }\n}\n\nexport default CheckResult;\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import jsonld from 'jsonld';\n\nconst CONTEXTS = {};\n\n// From https://github.com/flexdinesh/browser-or-node/blob/master/src/index.js\nconst isNode =\n  typeof process !== 'undefined' &&\n  process.versions != null &&\n  process.versions.node != null;\n\nconst nodeDocumentLoader = isNode\n  ? jsonld.documentLoaders.node()\n  : jsonld.documentLoaders.xhr();\n\n// change the default document loader\nconst defaultLoader = async (url: string) => {\n  if (url in CONTEXTS) {\n    return {\n      contextUrl: null,\n      document: CONTEXTS[url],\n      documentUrl: url,\n    };\n  }\n  const res = await nodeDocumentLoader(url);\n  CONTEXTS[url] = res.document;\n  return res;\n};\n\nexport default defaultLoader;\n","import jsonld from 'jsonld';\nimport CheckResult from './CheckResult';\nimport defaultLoader from './defaultDocumentLoader';\n\nconst isNotJsonLdPropery = property => !['@id', '@type'].includes(property);\n\nconst check = async (\n  jsonldDocument: string | object,\n  documentLoader = defaultLoader\n) => {\n  try {\n    let jsonldDoc: object;\n    if (typeof jsonldDocument === 'string') {\n      jsonldDoc = JSON.parse(jsonldDocument);\n    } else {\n      jsonldDoc = jsonldDocument;\n    }\n    // Remove all keys not present in the jsonld context\n    const expanded = await jsonld.expand(jsonldDoc, { documentLoader });\n    const compacted = await jsonld.compact(expanded, jsonldDoc['@context'], {\n      documentLoader,\n    });\n    // Check which keys have been removed\n    const keys = Object.keys(jsonldDoc).filter(isNotJsonLdPropery);\n    const newKeysSet = new Set(Object.keys(compacted));\n    const difference = keys.filter(key => !newKeysSet.has(key));\n    if (difference.length === 0) {\n      return new CheckResult(true);\n    }\n    return new CheckResult(\n      false,\n      'MISSING_PROPERTIES_IN_CONTEXT',\n      JSON.stringify(difference)\n    );\n  } catch (err) {\n    return new CheckResult(false, err.name, err.message);\n  }\n};\n\nexport default check;\n","const fetch = require('node-fetch');\n\nconst githubApi = async endpoint => {\n  return fetch(`https://api.github.com/repos/${endpoint}`).then(res =>\n    res.json()\n  );\n};\n\nconst getFiles = async (user, repo, ref = 'HEAD') => {\n  const all = await githubApi(`${user}/${repo}/git/trees/${ref}?recursive=1`);\n  const files = all.tree.filter(node => node.type === 'blob');\n  return files;\n};\n\nexport default getFiles;\n","const getAllOpenBrackets = (text: string) => {\n  const results: number[] = [];\n  for (let cursor = 0; cursor < text.length; cursor += 1) {\n    if (text[cursor] === '{') {\n      results.push(cursor);\n    }\n  }\n  return results;\n};\n\nconst getStringUntilMatchingBracket = (\n  text: string,\n  openBracketIndex: number\n) => {\n  let substring = text[openBracketIndex];\n  if (substring !== '{') {\n    throw new Error('start must be the index of an opening bracket');\n  }\n  let bracketCount = 1;\n  let cursor = openBracketIndex + 1;\n  const { length } = text;\n  while (bracketCount !== 0 && cursor < length) {\n    const currentChar = text[cursor];\n    if (currentChar === '{') {\n      bracketCount += 1;\n    } else if (currentChar === '}') {\n      bracketCount -= 1;\n    }\n    cursor += 1;\n    substring += currentChar;\n  }\n  try {\n    return JSON.parse(substring);\n  } catch (e) {\n    return null;\n  }\n};\n\nconst getAllJsonFromString = (text: string): Array<Object> => {\n  const openBrackets = getAllOpenBrackets(text);\n  return openBrackets\n    .map(openBracketIndex =>\n      getStringUntilMatchingBracket(text, openBracketIndex)\n    )\n    .filter(Boolean);\n};\n\nconst isJsonLdObject = (obj: Object): Boolean => {\n  return '@context' in obj;\n};\n\nconst getAllJsonLdFromString = (text: string) => {\n  return getAllJsonFromString(text).filter(obj => isJsonLdObject(obj));\n};\n\nexport { getAllJsonLdFromString, isJsonLdObject, getAllJsonFromString };\n"],"names":["CheckResult","ok","type","details","error","CONTEXTS","isNode","process","versions","node","nodeDocumentLoader","jsonld","documentLoaders","xhr","defaultLoader","url","contextUrl","document","documentUrl","res","isNotJsonLdPropery","property","includes","check","jsonldDocument","documentLoader","jsonldDoc","JSON","parse","expand","expanded","compact","compacted","keys","Object","filter","newKeysSet","Set","difference","key","has","length","stringify","err","name","message","fetch","require","githubApi","endpoint","then","json","getFiles","user","repo","ref","all","files","tree","getAllOpenBrackets","text","results","cursor","push","getStringUntilMatchingBracket","openBracketIndex","substring","Error","bracketCount","currentChar","e","getAllJsonFromString","openBrackets","map","Boolean","isJsonLdObject","obj","getAllJsonLdFromString"],"mappings":"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"}