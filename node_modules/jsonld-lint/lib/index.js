"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright 2020 - MATTR Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var vscode_json_languageservice_1 = require("vscode-json-languageservice");
var jsonldDocumentProcessor_1 = require("./jsonldDocumentProcessor");
exports.buildContextResolver = jsonldDocumentProcessor_1.buildContextResolver;
var utilities_1 = require("./utilities");
var types_1 = require("./types");
var service = vscode_json_languageservice_1.getLanguageService({});
__export(require("./types"));
/**
 * VS Code language identifier for JSON
 */
var JSON_LANGUAGE_ID = "json";
/**
 * Sets the default linting options
 *
 * @param options Options to populate further default from
 */
var setDefaultJsonLdLintOptions = function (options) {
    var _a, _b;
    var lintingRules = (_a = options) === null || _a === void 0 ? void 0 : _a.lintingRules;
    if (!lintingRules) {
        lintingRules = [
            types_1.JsonLdDocumentLintRule.UnrecognizedJsonLdKeyword,
            types_1.JsonLdDocumentLintRule.UnmappedTerm
        ];
    }
    var contextResolver = (_b = options) === null || _b === void 0 ? void 0 : _b.contextResolver;
    if (!contextResolver) {
        contextResolver = jsonldDocumentProcessor_1.buildContextResolver();
    }
    return {
        lintingRules: lintingRules,
        contextResolver: contextResolver
    };
};
/**
 * Lints a JSON-LD document
 *
 * @param document A JSON-LD document to lint
 *
 * @returns Results of the linting
 */
exports.lint = function (document, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.process(document, options)];
            case 1: return [2 /*return*/, (_a.sent()).filter(function (item) {
                    return item.type === types_1.JsonLdDocumentProcessingResultType.JsonLdLintingResult ||
                        item.type === types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError;
                })];
        }
    });
}); };
/**
 * Processes a JSON-LD document performing both linting
 * and extracting the understood terms and values
 *
 * @param document A JSON-LD document
 *
 * @returns Result of the processing
 */
exports.process = function (document, options) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedDocument, rootNode, doc, jsonDocument, processingContext, ex_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = setDefaultJsonLdLintOptions(options);
                try {
                    parsedDocument = JSON.parse(document);
                }
                catch (ex) {
                    throw utilities_1.createJsonLdLintError(types_1.JsonLdLintErrorType.ParsingError, "Unable to parse input document as JSON", { input: document, rawError: ex });
                }
                try {
                    doc = vscode_json_languageservice_1.TextDocument.create("temp", JSON_LANGUAGE_ID, 1, document);
                    jsonDocument = service.parseJSONDocument(doc);
                    rootNode = jsonDocument.root;
                }
                catch (ex) {
                    throw utilities_1.createJsonLdLintError(types_1.JsonLdLintErrorType.ParsingError, "An error occurred while processing the JSON document with vs-code language service", { input: document, rawError: ex });
                }
                if (!rootNode || rootNode.type !== "object") {
                    // TODO review this
                    throw utilities_1.createJsonLdLintError(types_1.JsonLdLintErrorType.ParsingError, "Expected a JSON object at the root of the JSON-LD document", { input: document });
                }
                if (!jsonldDocumentProcessor_1.isCompactJsonLdDocument(parsedDocument)) {
                    throw utilities_1.createJsonLdLintError(types_1.JsonLdLintErrorType.JsonLdDetectionError, "JSON Document not a valid JSON-LD document, no @context found", { input: document });
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                processingContext = {
                    document: parsedDocument,
                    contextResolver: options.contextResolver
                };
                return [4 /*yield*/, exports.processJsonObject(processingContext, rootNode)];
            case 2: return [2 /*return*/, _a.sent()];
            case 3:
                ex_1 = _a.sent();
                throw utilities_1.createJsonLdLintError(types_1.JsonLdLintErrorType.ParsingError, "An error occurred while processing the JSON-LD document", { input: document, rawError: ex_1 });
            case 4: return [2 /*return*/];
        }
    });
}); };
/**
 * Processes a JSON value as a JSON object in the context of a JSON-LD document
 *
 */
exports.processJsonObject = function (processingContext, object) { return __awaiter(void 0, void 0, void 0, function () {
    var results, jsonLdKeywordProperties, nonJsonLdKeywordProperties, currentJsonLdObjectType, i, _a, _b, _c, currentProcessingContext, unmappedTerms, jsonLdDocumentContext, ex_2, i, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                results = [];
                jsonLdKeywordProperties = object.properties.filter(function (_) { return jsonldDocumentProcessor_1.isJsonLdKeyword(_.keyNode.value); });
                nonJsonLdKeywordProperties = object.properties.filter(function (_) { return !jsonLdKeywordProperties.includes(_); });
                currentJsonLdObjectType = exports.detectJsonLdObjectType(processingContext);
                i = 0;
                _g.label = 1;
            case 1:
                if (!(i < jsonLdKeywordProperties.length)) return [3 /*break*/, 4];
                _b = (_a = results.push).apply;
                _c = [results];
                return [4 /*yield*/, exports.processJsonProperty(processingContext, jsonLdKeywordProperties[i], object)];
            case 2:
                _b.apply(_a, _c.concat([__spread.apply(void 0, [(_g.sent())])]));
                _g.label = 3;
            case 3:
                i++;
                return [3 /*break*/, 1];
            case 4:
                if (results.some(function (item) {
                    return item.type === types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError;
                })) {
                    return [2 /*return*/, results];
                }
                if (!!processingContext.jsonLdDocumentContext) return [3 /*break*/, 10];
                _g.label = 5;
            case 5:
                _g.trys.push([5, 8, , 9]);
                return [4 /*yield*/, jsonldDocumentProcessor_1.expand(processingContext.document)];
            case 6:
                unmappedTerms = (_g.sent()).unmappedTerms;
                return [4 /*yield*/, jsonldDocumentProcessor_1.getDocumentContext(processingContext.document, processingContext.contextResolver)];
            case 7:
                jsonLdDocumentContext = _g.sent();
                currentProcessingContext = __assign(__assign({}, processingContext), { currentJsonLdObjectType: currentJsonLdObjectType,
                    jsonLdDocumentContext: jsonLdDocumentContext,
                    unmappedTerms: unmappedTerms });
                return [3 /*break*/, 9];
            case 8:
                ex_2 = _g.sent();
                return [2 /*return*/, results];
            case 9: return [3 /*break*/, 11];
            case 10:
                currentProcessingContext = __assign(__assign({}, processingContext), { currentJsonLdObjectType: currentJsonLdObjectType });
                _g.label = 11;
            case 11:
                i = 0;
                _g.label = 12;
            case 12:
                if (!(i < nonJsonLdKeywordProperties.length)) return [3 /*break*/, 15];
                _e = (_d = results.push).apply;
                _f = [results];
                return [4 /*yield*/, exports.processJsonProperty(currentProcessingContext, nonJsonLdKeywordProperties[i], object)];
            case 13:
                _e.apply(_d, _f.concat([__spread.apply(void 0, [(_g.sent())])]));
                _g.label = 14;
            case 14:
                i++;
                return [3 /*break*/, 12];
            case 15: return [2 /*return*/, results];
        }
    });
}); };
/**
 * Detects the type of the supplied JSON object in the context of JSON-LD grammar
 * @see https://www.w3.org/TR/json-ld11/#json-ld-grammar
 *
 * @param processingContext current processing context
 * @param object the object we are detecting the JsonLdObjectType of
 */
exports.detectJsonLdObjectType = function (processingContext) {
    var _a;
    // TODO there are other types of valid JSON-LD objects too
    if ((_a = processingContext.currentTerm) === null || _a === void 0 ? void 0 : _a.name) {
        if (processingContext.currentTerm.name === "@context") {
            return types_1.JsonLdObjectType.LocalContextDefinition;
        }
        if (processingContext.currentTerm.name === "@graph") {
            return types_1.JsonLdObjectType.GraphObject;
        }
        if (processingContext.currentJsonLdObjectType ===
            types_1.JsonLdObjectType.LocalContextDefinition &&
            !jsonldDocumentProcessor_1.isJsonLdKeyword(processingContext.currentTerm.name)) {
            return types_1.JsonLdObjectType.ExpandedTermDefinition;
        }
    }
    return types_1.JsonLdObjectType.NodeObject;
};
/**
 * Processes a JSON property from a JSON object in the context of a JSON-LD document
 *
 */
exports.processJsonProperty = function (processingContext, property, object) { return __awaiter(void 0, void 0, void 0, function () {
    var results, _a, _b, _c, currentProcessingContext, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                results = [];
                _b = (_a = results.push).apply;
                _c = [results];
                return [4 /*yield*/, exports.processJsonPropertyKey(processingContext, property.keyNode, object)];
            case 1:
                _b.apply(_a, _c.concat([__spread.apply(void 0, [(_g.sent())])]));
                currentProcessingContext = __assign(__assign({}, processingContext), { currentTerm: results.find(function (item) { return item.type === types_1.JsonLdDocumentProcessingResultType.JsonLdTerm; }) });
                if (!property.valueNode) return [3 /*break*/, 3];
                _e = (_d = results.push).apply;
                _f = [results];
                return [4 /*yield*/, exports.processJsonValue(currentProcessingContext, property.valueNode)];
            case 2:
                _e.apply(_d, _f.concat([__spread.apply(void 0, [(_g.sent())])]));
                _g.label = 3;
            case 3: return [2 /*return*/, results];
        }
    });
}); };
/**
 * Processes a JSON value for its corresponding JSON key in the context of a JSON-LD document
 *
 */
exports.processJsonValue = function (processingContext, value) { return __awaiter(void 0, void 0, void 0, function () {
    var termInformation, _a, termInformation, valueValidator;
    var _b, _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                // If we could not understand the current term then
                // don't bother processing its value and return
                if (!processingContext.currentTerm) {
                    return [2 /*return*/, []];
                }
                if (jsonldDocumentProcessor_1.isJsonLdKeyword(processingContext.currentTerm.name)) {
                    termInformation = jsonldDocumentProcessor_1.jsonLdKeywords.get(processingContext.currentTerm.name);
                    if (((_b = termInformation) === null || _b === void 0 ? void 0 : _b.expectedJsonValueTypes) &&
                        !termInformation.expectedJsonValueTypes.includes(value.type)) {
                        return [2 /*return*/, [
                                {
                                    type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                    rule: types_1.JsonLdDocumentSyntaxErrorRule.UnexpectedJsonLdKeywordValueType,
                                    message: "Value type for the JSON-LD keyword \"" + processingContext.currentTerm.name + "\" of \"" + value.type + "\" is invalid, " + (termInformation.expectedJsonValueTypes.length > 1
                                        ? "expected one of type: " +
                                            termInformation.expectedJsonValueTypes
                                        : "expected \
type: " + termInformation.expectedJsonValueTypes),
                                    documentPosition: utilities_1.documentOffSetToPosition(value.offset, value.length),
                                    value: processingContext.currentTerm.name
                                }
                            ]];
                    }
                }
                // If the value we are processing is that of a key in a JSON-LD
                // context definition and its not a JSON-LD syntax token, then by process of elimination
                // it is a JSON-LD term definition and JSON-LD term definitions can only feature certain members
                // @see https://www.w3.org/TR/json-ld11/#context-definitions for more information
                if (((_c = processingContext) === null || _c === void 0 ? void 0 : _c.currentJsonLdObjectType) ===
                    types_1.JsonLdObjectType.LocalContextDefinition &&
                    !jsonldDocumentProcessor_1.isJsonLdKeyword(processingContext.currentTerm.name) &&
                    !jsonldDocumentProcessor_1.isValidAsJsonLdKeyword(processingContext.currentTerm.name) &&
                    !jsonldDocumentProcessor_1.validJsonLdTermDefinitionJsonTypes.includes(value.type)) {
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                rule: types_1.JsonLdDocumentSyntaxErrorRule.UnexpectedJsonLdKeywordValueType,
                                message: "Value type for the JSON-LD term definition for term \"" + processingContext.currentTerm.name + "\" of \"" + value.type + "\" is invalid, expected one of: " + jsonldDocumentProcessor_1.validJsonLdTermDefinitionJsonTypes,
                                documentPosition: utilities_1.documentOffSetToPosition(value.offset, value.length),
                                value: processingContext.currentTerm.name
                            }
                        ]];
                }
                _a = value.type;
                switch (_a) {
                    case "object": return [3 /*break*/, 1];
                    case "array": return [3 /*break*/, 3];
                }
                return [3 /*break*/, 5];
            case 1: return [4 /*yield*/, exports.processJsonObject(processingContext, value)];
            case 2: return [2 /*return*/, __spread.apply(void 0, [(_f.sent())])];
            case 3: return [4 /*yield*/, exports.processJsonArrayValue(processingContext, value)];
            case 4: return [2 /*return*/, __spread.apply(void 0, [(_f.sent())])];
            case 5:
                {
                    // All other JSON value types e.g boolean & number & string
                    if (jsonldDocumentProcessor_1.isJsonLdKeyword(processingContext.currentTerm.name)) {
                        termInformation = jsonldDocumentProcessor_1.jsonLdKeywords.get(processingContext.currentTerm.name);
                        if (((_d = termInformation) === null || _d === void 0 ? void 0 : _d.expectedJsonValues) &&
                            !termInformation.expectedJsonValues.includes(value.value)) {
                            return [2 /*return*/, [
                                    {
                                        type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                        rule: types_1.JsonLdDocumentSyntaxErrorRule.UnexpectedJsonLdKeywordValue,
                                        message: "Value for the JSON-LD keyword \"" + processingContext.currentTerm.name + "\" of \"" + value.value + "\" is invalid, expected one of: " + termInformation.expectedJsonValues,
                                        value: processingContext.currentTerm.name,
                                        documentPosition: utilities_1.documentOffSetToPosition(value.offset, value.length)
                                    }
                                ]];
                        }
                        if (((_e = termInformation) === null || _e === void 0 ? void 0 : _e.valueValidators) &&
                            termInformation.valueValidators.has(value.type)) {
                            valueValidator = termInformation.valueValidators.get(value.type);
                            if (!valueValidator(value.value)) {
                                return [2 /*return*/, [
                                        {
                                            type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                            rule: types_1.JsonLdDocumentSyntaxErrorRule.UnexpectedJsonLdKeywordValue,
                                            message: "Value for the JSON-LD syntax token \"" + processingContext.currentTerm.name + "\" of \"" + value.value + "\" is invalid",
                                            value: processingContext.currentTerm.name,
                                            documentPosition: utilities_1.documentOffSetToPosition(value.offset, value.length)
                                        }
                                    ]];
                            }
                        }
                    }
                    // TODO do other processing on the JSON value here later
                    return [2 /*return*/, []];
                }
                _f.label = 6;
            case 6: return [2 /*return*/];
        }
    });
}); };
/**
 * Processes a JSON properties value as a string
 *
 */
exports.processJsonArrayValue = function (processingContext, value) { return __awaiter(void 0, void 0, void 0, function () {
    var results, i, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                results = [];
                i = 0;
                _d.label = 1;
            case 1:
                if (!(i < value.children.length)) return [3 /*break*/, 4];
                _b = (_a = results.push).apply;
                _c = [results];
                return [4 /*yield*/, exports.processJsonValue(processingContext, value.children[i])];
            case 2:
                _b.apply(_a, _c.concat([__spread.apply(void 0, [(_d.sent())])]));
                _d.label = 3;
            case 3:
                i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, results];
        }
    });
}); };
/**
 * Processes a JSON properties key as JSON-LD term
 *
 */
exports.processJsonPropertyKey = function (processingContext, key, object) { return __awaiter(void 0, void 0, void 0, function () {
    var termInfo;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (key.value === "") {
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                rule: types_1.JsonLdDocumentSyntaxErrorRule.EmptyJsonPropertyKey,
                                message: "Empty JSON property encountered",
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            }
                        ]];
                }
                if (exports.isDuplicatePropertyInObject(object, key.value)) {
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                rule: types_1.JsonLdDocumentSyntaxErrorRule.DuplicatePropertyInJsonObject,
                                message: "Duplicate property of \"" + key.value + "\" encountered",
                                value: key.value,
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            }
                        ]];
                }
                if (jsonldDocumentProcessor_1.isJsonLdKeyword(key.value) &&
                    exports.isDuplicateAliasedPropertyInObject(object, key.value)) {
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                rule: types_1.JsonLdDocumentSyntaxErrorRule.DuplicateAliasPropertyInJsonObject,
                                message: "Duplicate aliased property of JSON-LD term of \"" + key.value + "\" encountered",
                                value: key.value,
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            }
                        ]];
                }
                if (jsonldDocumentProcessor_1.isJsonLdKeyword(key.value)) {
                    if (processingContext.currentJsonLdObjectType &&
                        !jsonldDocumentProcessor_1.isJsonLdKeywordAndValidInJsonLdObjectType(key.value, processingContext.currentJsonLdObjectType)) {
                        return [2 /*return*/, [
                                {
                                    type: types_1.JsonLdDocumentProcessingResultType.JsonLdSyntaxError,
                                    rule: types_1.JsonLdDocumentSyntaxErrorRule.UnexpectedUseOfJsonLdKeyword,
                                    message: "Usage of JSON-LD syntax token \"" + key.value + "\" in the JSON-LD object type of \"" + processingContext.currentJsonLdObjectType + "\" is invalid",
                                    value: key.value,
                                    documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                                }
                            ]];
                    }
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdTerm,
                                name: key.value,
                                iri: (_a = jsonldDocumentProcessor_1.jsonLdKeywords.get(key.value)) === null || _a === void 0 ? void 0 : _a.iri,
                                isJsonLdKeyword: true,
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            }
                        ]];
                }
                if (jsonldDocumentProcessor_1.isValidAsJsonLdKeyword(key.value)) {
                    return [2 /*return*/, [
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdLintingResult,
                                rule: types_1.JsonLdDocumentLintRule.UnrecognizedJsonLdKeyword,
                                message: "The term \"" + key.value + "\" matches the convention of a JSON-LD syntax token but is un-recognized",
                                value: key.value,
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            },
                            {
                                type: types_1.JsonLdDocumentProcessingResultType.JsonLdTerm,
                                name: key.value,
                                isJsonLdKeyword: false,
                                documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                            }
                        ]];
                }
                if (!(processingContext.currentJsonLdObjectType ===
                    types_1.JsonLdObjectType.LocalContextDefinition)) return [3 /*break*/, 1];
                // if (!termInformation.expectedJsonValueTypes.includes(value.type))
                return [2 /*return*/, []];
            case 1:
                if (!(processingContext.unmappedTerms &&
                    processingContext.unmappedTerms.includes(key.value))) return [3 /*break*/, 2];
                return [2 /*return*/, [
                        {
                            type: types_1.JsonLdDocumentProcessingResultType.JsonLdLintingResult,
                            rule: types_1.JsonLdDocumentLintRule.UnmappedTerm,
                            message: "The term \"" + key.value + "\" is not defined in the document context (unmapped)",
                            value: key.value,
                            documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                        }
                    ]];
            case 2: return [4 /*yield*/, jsonldDocumentProcessor_1.getTermInfo(processingContext.jsonLdDocumentContext, key.value)];
            case 3:
                termInfo = _b.sent();
                return [2 /*return*/, [
                        {
                            type: types_1.JsonLdDocumentProcessingResultType.JsonLdTerm,
                            name: termInfo.name,
                            isJsonLdKeyword: false,
                            iri: termInfo.iri,
                            valueTypeIri: termInfo.valueTypeIri,
                            documentPosition: utilities_1.documentOffSetToPosition(key.offset, key.length)
                        }
                    ]];
        }
    });
}); };
/**
 * Checks whether the object contains a duplicate of the supplied property which is
 * illegal in all instances of JSON objects in JSON-LD syntax
 *
 * @param object object to check from
 * @param key string key to check if a duplicate exists
 */
exports.isDuplicatePropertyInObject = function (object, key) {
    return (object.properties.filter(function (item) { return key === item.keyNode.value; }).length > 1);
};
/**
 * Checks whether an object contains duplicate alias properties
 *
 * Example - If an object contains both an `@id` and `id` property
 *
 * @param object object to check from
 * @param key string key to check if the duplicate aliased property exists
 */
exports.isDuplicateAliasedPropertyInObject = function (object, key) {
    var keyword = jsonldDocumentProcessor_1.jsonLdKeywords.get(key);
    if (!keyword) {
        return true;
    }
    return (object.properties.filter(function (item) { return keyword.aliasTerm === item.keyNode.value; }).length > 0);
};
//# sourceMappingURL=index.js.map