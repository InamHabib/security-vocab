import LRUCache from "lru-cache";
import { JsonLdDocumentTermInfo, KnownJsonLdTerm, JsonLdDocumentContext, JsonLdObjectType, ContextResolver } from "./types";
/**
 * Checks whether an input string is a valid absolute IRI
 *
 * @param value String to test the absolute IRI regular expression against
 */
export declare const isAbsoluteIri: (value: string) => boolean;
/**
 * Indicates whether the given string matches the conventions required to be a valid as a JSON-LD keyword
 * e.g a string suffixed with a '@' symbol
 *
 * @param value value to check
 */
export declare const isValidAsJsonLdKeyword: (value: string) => boolean;
/**
 * Checks whether the supplied value is a JSON-LD keyword
 *
 * @param value value to check
 */
export declare const isJsonLdKeyword: (value: string) => boolean;
/**
 * Checks whether the JSON-LD keyword is valid for the JSON-LD object
 *
 * @param value value to check
 * @param type type the JSON-LD keyword is valid in
 */
export declare const isJsonLdKeywordAndValidInJsonLdObjectType: (value: string, type: JsonLdObjectType) => boolean | undefined;
/**
 *  A list of known JSON-LD keywords and what we know about them from a JSON-LD
 *  syntax perspective
 *
 * @see https://www.w3.org/TR/json-ld11/#keywords
 */
export declare const jsonLdKeywords: Map<string, KnownJsonLdTerm>;
/**
 * An enumeration of the valid JSON value types that a JSON-LD term
 * definition can be in a JSON-LD context
 */
export declare const validJsonLdTermDefinitionJsonTypes: string[];
/**
 * Checks whether the supplied document is a compact JSON-LD document
 *
 * @param document document to check
 *
 * @returns {boolean} Indicating whether the document is a compact JSON-LD document
 */
export declare const isCompactJsonLdDocument: (document: any) => boolean;
/**
 * Expands a JSON-LD document and returns any un-mapped properties
 *
 * @param document JSON-LD document to expand
 *
 * @returns Expanded JSON-LD document
 */
export declare const expand: (document: any) => Promise<any>;
export declare const getDocumentContext: (document: any, contextResolver: ContextResolver) => Promise<JsonLdDocumentContext>;
/**
 * Gets the information associated to a JSON-LD term
 *
 * @param documentContext documents context to extract the term definition from
 * @param term to fetch the context for
 *
 * @returns {JsonLdDocumentTermInfo} Result
 */
export declare const getTermInfo: (documentContext: any, term: string) => Promise<JsonLdDocumentTermInfo>;
/**
 * Builds a context resolver featuring a shared LRU based cache
 * @param sharedCache LRU based cache
 */
export declare const buildContextResolver: (sharedCache?: LRUCache<string, Map<string, any>> | undefined) => ContextResolver;
