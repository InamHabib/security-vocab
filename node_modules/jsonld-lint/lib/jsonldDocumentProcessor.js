"use strict";
/*
 * Copyright 2020 - MATTR Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonld = __importStar(require("jsonld"));
var context = __importStar(require("jsonld/lib/context"));
var ContextResolver_1 = __importDefault(require("jsonld/lib/ContextResolver"));
var lru_cache_1 = __importDefault(require("lru-cache"));
var types_1 = require("./types");
/**
 * The keyword pattern for JSON-LD terms
 * taken from @here https://github.com/digitalbazaar/jsonld.js/blob/master/lib/context.js#L30
 */
var KEYWORD_PATTERN = /^@[a-zA-Z]+$/;
/**
 * Regular expression to test if a string is a valid absolute IRI or blank node IRI
 * taken from @see https://github.com/digitalbazaar/jsonld.js/blob/master/lib/url.js#L280
 */
var ABSOLUTE_IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;
/**
 * Checks whether an input string is a valid absolute IRI
 *
 * @param value String to test the absolute IRI regular expression against
 */
exports.isAbsoluteIri = function (value) { return ABSOLUTE_IRI_REGEX.test(value); };
/**
 * Indicates whether the given string matches the conventions required to be a valid as a JSON-LD keyword
 * e.g a string suffixed with a '@' symbol
 *
 * @param value value to check
 */
exports.isValidAsJsonLdKeyword = function (value) {
    return value.match(KEYWORD_PATTERN) !== null;
};
/**
 * Checks whether the supplied value is a JSON-LD keyword
 *
 * @param value value to check
 */
exports.isJsonLdKeyword = function (value) { return exports.jsonLdKeywords.has(value); };
/**
 * Checks whether the JSON-LD keyword is valid for the JSON-LD object
 *
 * @param value value to check
 * @param type type the JSON-LD keyword is valid in
 */
exports.isJsonLdKeywordAndValidInJsonLdObjectType = function (value, type) { var _a; return (_a = exports.jsonLdKeywords.get(value)) === null || _a === void 0 ? void 0 : _a.validInJsonLdObjectTypes.includes(type); };
/**
 *  A list of known JSON-LD keywords and what we know about them from a JSON-LD
 *  syntax perspective
 *
 * @see https://www.w3.org/TR/json-ld11/#keywords
 */
exports.jsonLdKeywords = new Map([
    [
        "@base",
        {
            name: "@base",
            iri: "https://www.w3.org/TR/json-ld11/#base-iri",
            expectedJsonValueTypes: ["string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@container",
        {
            name: "@container",
            iri: "https://www.w3.org/TR/json-ld11/#keywords-and-keywords",
            expectedJsonValueTypes: ["string"],
            expectedJsonValues: ["@list", "@language", "@set", "@index", "@id"],
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.ExpandedTermDefinition,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "@context",
        {
            name: "@context",
            iri: "https://www.w3.org/TR/json-ld11/#the-context",
            expectedJsonValueTypes: ["string", "array", "object"],
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.ExpandedTermDefinition
            ],
            valueValidators: new Map([
                ["string", exports.isAbsoluteIri]
            ])
        }
    ],
    [
        "@direction",
        {
            name: "@direction",
            iri: "https://www.w3.org/TR/json-ld11/#base-direction",
            expectedJsonValueTypes: ["string"],
            expectedJsonValues: ["ltr", "rtl"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@graph",
        {
            name: "@graph",
            iri: "https://www.w3.org/TR/json-ld11/#named-graphs",
            expectedJsonValueTypes: ["array", "object"],
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "@id",
        {
            name: "@id",
            iri: "https://www.w3.org/TR/json-ld11/#node-identifiers",
            expectedJsonValueTypes: ["string"],
            aliasTerm: "id",
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.ExpandedTermDefinition,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "id",
        {
            name: "@id",
            iri: "https://www.w3.org/TR/json-ld11/#node-identifiers",
            expectedJsonValueTypes: ["string"],
            aliasTerm: "@id",
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.ExpandedTermDefinition,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "@import",
        {
            name: "@import",
            iri: "https://www.w3.org/TR/json-ld11/#imported-contexts",
            expectedJsonValueTypes: ["string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@included",
        {
            name: "@included",
            iri: "https://www.w3.org/TR/json-ld11/#included-blocks",
            expectedJsonValueTypes: ["object", "array"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@index",
        {
            name: "@index",
            iri: "https://www.w3.org/TR/json-ld11/#property-based-data-indexing",
            expectedJsonValueTypes: ["string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@json",
        {
            name: "@json",
            iri: "https://www.w3.org/TR/json-ld11/#json-literals",
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@language",
        {
            name: "@language",
            iri: "https://www.w3.org/TR/json-ld11/#string-internationalization",
            expectedJsonValueTypes: ["string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@list",
        {
            name: "@list",
            iri: "https://www.w3.org/TR/json-ld11/#lists",
            expectedJsonValueTypes: ["array"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@nest",
        {
            name: "@nest",
            iri: "https://www.w3.org/TR/json-ld11/#nested-properties",
            expectedJsonValueTypes: ["string"],
            expectedJsonValues: ["labels"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@none",
        {
            name: "@none",
            iri: "https://www.w3.org/TR/json-ld11/#keywords-and-keywords",
            expectedJsonValueTypes: ["array", "object", "string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@prefix",
        {
            name: "@prefix",
            iri: "https://www.w3.org/TR/json-ld11/#keywords-and-keywords",
            expectedJsonValueTypes: ["boolean"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@propagate",
        {
            name: "@propagate",
            iri: "https://www.w3.org/TR/json-ld11/#keywords-and-keywords",
            expectedJsonValueTypes: ["boolean"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@protected",
        {
            name: "@protected",
            iri: "https://www.w3.org/TR/json-ld11/#protected-term-definitions",
            expectedJsonValueTypes: ["boolean"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@type",
        {
            name: "@type",
            iri: "https://www.w3.org/TR/json-ld11/#typed-values",
            expectedJsonValueTypes: ["string", "array"],
            aliasTerm: "type",
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.ExpandedTermDefinition,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "type",
        {
            name: "@type",
            iri: "https://www.w3.org/TR/json-ld11/#typed-values",
            expectedJsonValueTypes: ["string", "array"],
            aliasTerm: "@type",
            validInJsonLdObjectTypes: [
                types_1.JsonLdObjectType.NodeObject,
                types_1.JsonLdObjectType.ExpandedTermDefinition,
                types_1.JsonLdObjectType.LocalContextDefinition
            ]
        }
    ],
    [
        "@value",
        {
            name: "@value",
            iri: "https://www.w3.org/TR/json-ld11/#typed-values",
            expectedJsonValueTypes: ["string", "number", "boolean"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.ExpandedTermDefinition]
        }
    ],
    [
        "@version",
        {
            name: "@version",
            iri: "https://www.w3.org/TR/json-ld11/#json-ld-1-1-processing-mode",
            expectedJsonValueTypes: ["number"],
            expectedJsonValues: [1, 1.0, 1.1],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ],
    [
        "@vocab",
        {
            name: "@vocab",
            iri: "https://www.w3.org/TR/json-ld11/#default-vocabulary",
            expectedJsonValueTypes: ["string"],
            validInJsonLdObjectTypes: [types_1.JsonLdObjectType.LocalContextDefinition]
        }
    ]
]);
/**
 * An enumeration of the valid JSON value types that a JSON-LD term
 * definition can be in a JSON-LD context
 */
exports.validJsonLdTermDefinitionJsonTypes = ["string", "object"];
/**
 * Checks whether the supplied document is a compact JSON-LD document
 *
 * @param document document to check
 *
 * @returns {boolean} Indicating whether the document is a compact JSON-LD document
 */
exports.isCompactJsonLdDocument = function (document) {
    return document["@context"] !== undefined;
};
/**
 * Expands a JSON-LD document and returns any un-mapped properties
 *
 * @param document JSON-LD document to expand
 *
 * @returns Expanded JSON-LD document
 */
exports.expand = function (document) { return __awaiter(void 0, void 0, void 0, function () {
    var unmappedTerms, expansionMap, expandedDocument;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                unmappedTerms = [];
                expansionMap = function (info) {
                    var _a;
                    if (((_a = info) === null || _a === void 0 ? void 0 : _a.unmappedProperty) &&
                        !unmappedTerms.includes(info.unmappedProperty)) {
                        unmappedTerms.push(info.unmappedProperty);
                    }
                };
                return [4 /*yield*/, jsonld.expand(document, { expansionMap: expansionMap })];
            case 1:
                expandedDocument = _a.sent();
                return [2 /*return*/, {
                        expandedDocument: expandedDocument,
                        unmappedTerms: unmappedTerms
                    }];
        }
    });
}); };
// TODO type the response
exports.getDocumentContext = function (document, contextResolver) { return __awaiter(void 0, void 0, void 0, function () {
    var initialContext, resultingContext, _a, _b, key, item, e_1_1;
    var e_1, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (!document["@context"]) {
                    throw Error("Failed to find document context");
                }
                return [4 /*yield*/, jsonld.processContext(context.getInitialContext({}), document["@context"], { contextResolver: contextResolver })];
            case 1:
                initialContext = _d.sent();
                resultingContext = __assign({}, initialContext);
                _d.label = 2;
            case 2:
                _d.trys.push([2, 7, 8, 9]);
                _a = __values(initialContext.mappings.keys()), _b = _a.next();
                _d.label = 3;
            case 3:
                if (!!_b.done) return [3 /*break*/, 6];
                key = _b.value;
                item = initialContext.mappings.get(key);
                if (!item["@context"]) return [3 /*break*/, 5];
                return [4 /*yield*/, jsonld.processContext(resultingContext, item["@context"])];
            case 4:
                resultingContext = _d.sent();
                _d.label = 5;
            case 5:
                _b = _a.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _d.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9: return [2 /*return*/, resultingContext];
        }
    });
}); };
/**
 * Gets the information associated to a JSON-LD term
 *
 * @param documentContext documents context to extract the term definition from
 * @param term to fetch the context for
 *
 * @returns {JsonLdDocumentTermInfo} Result
 */
exports.getTermInfo = function (documentContext, term) { return __awaiter(void 0, void 0, void 0, function () {
    var iri, valueTypeIri, _isJsonLdKeyword, mappedTerm, valueType;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _isJsonLdKeyword = false;
                if (!exports.isJsonLdKeyword(term)) return [3 /*break*/, 1];
                _isJsonLdKeyword = true;
                iri = (_a = exports.jsonLdKeywords.get(term)) === null || _a === void 0 ? void 0 : _a.iri;
                return [3 /*break*/, 4];
            case 1:
                if (!(((_b = documentContext) === null || _b === void 0 ? void 0 : _b.mappings) && documentContext.mappings.has(term))) return [3 /*break*/, 2];
                mappedTerm = documentContext.mappings.get(term);
                iri = mappedTerm["@id"];
                valueType = mappedTerm["@type"];
                if (valueType && valueType !== "@id") {
                    valueTypeIri = valueType;
                }
                return [3 /*break*/, 4];
            case 2:
                if (!((_c = documentContext) === null || _c === void 0 ? void 0 : _c.mappings)) return [3 /*break*/, 4];
                // todo convert this forEach loop
                return [4 /*yield*/, documentContext.mappings.forEach(function (item) { return __awaiter(void 0, void 0, void 0, function () {
                        var nestedContext, mappedTerm, valueType;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!item["@context"]) return [3 /*break*/, 2];
                                    return [4 /*yield*/, jsonld.processContext(documentContext, item["@context"], {})];
                                case 1:
                                    nestedContext = _a.sent();
                                    if (nestedContext.mappings && nestedContext.mappings.has(term)) {
                                        mappedTerm = nestedContext.mappings.get(term);
                                        iri = mappedTerm["@id"];
                                        valueType = mappedTerm["@type"];
                                        if (valueType && valueType !== "@id") {
                                            valueTypeIri = valueType;
                                        }
                                    }
                                    _a.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    }); })];
            case 3:
                // todo convert this forEach loop
                _d.sent();
                _d.label = 4;
            case 4: return [2 /*return*/, {
                    name: term,
                    iri: iri,
                    valueTypeIri: valueTypeIri,
                    isJsonLdKeyword: _isJsonLdKeyword
                }];
        }
    });
}); };
/**
 * Builds a context resolver featuring a shared LRU based cache
 * @param sharedCache LRU based cache
 */
exports.buildContextResolver = function (sharedCache) {
    if (!sharedCache) {
        sharedCache = new lru_cache_1.default();
    }
    return new ContextResolver_1.default({ sharedCache: sharedCache });
};
//# sourceMappingURL=jsonldDocumentProcessor.js.map