import { ASTNode, PropertyASTNode, StringASTNode, ObjectASTNode, ArrayASTNode } from "vscode-json-languageservice";
import { buildContextResolver } from "./jsonldDocumentProcessor";
import { JsonLdObjectType, JsonLdDocumentProcessingResult, JsonLdLintOptions, JsonLdDocumentProcessingContext } from "./types";
export * from "./types";
export { buildContextResolver };
/**
 * Lints a JSON-LD document
 *
 * @param document A JSON-LD document to lint
 *
 * @returns Results of the linting
 */
export declare const lint: (document: string, options?: JsonLdLintOptions | undefined) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Processes a JSON-LD document performing both linting
 * and extracting the understood terms and values
 *
 * @param document A JSON-LD document
 *
 * @returns Result of the processing
 */
export declare const process: (document: string, options?: JsonLdLintOptions | undefined) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Processes a JSON value as a JSON object in the context of a JSON-LD document
 *
 */
export declare const processJsonObject: (processingContext: JsonLdDocumentProcessingContext, object: ObjectASTNode) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Detects the type of the supplied JSON object in the context of JSON-LD grammar
 * @see https://www.w3.org/TR/json-ld11/#json-ld-grammar
 *
 * @param processingContext current processing context
 * @param object the object we are detecting the JsonLdObjectType of
 */
export declare const detectJsonLdObjectType: (processingContext: JsonLdDocumentProcessingContext) => JsonLdObjectType;
/**
 * Processes a JSON property from a JSON object in the context of a JSON-LD document
 *
 */
export declare const processJsonProperty: (processingContext: JsonLdDocumentProcessingContext, property: PropertyASTNode, object: ObjectASTNode) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Processes a JSON value for its corresponding JSON key in the context of a JSON-LD document
 *
 */
export declare const processJsonValue: (processingContext: JsonLdDocumentProcessingContext, value: ASTNode) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Processes a JSON properties value as a string
 *
 */
export declare const processJsonArrayValue: (processingContext: JsonLdDocumentProcessingContext, value: ArrayASTNode) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Processes a JSON properties key as JSON-LD term
 *
 */
export declare const processJsonPropertyKey: (processingContext: JsonLdDocumentProcessingContext, key: StringASTNode, object: ObjectASTNode) => Promise<JsonLdDocumentProcessingResult[]>;
/**
 * Checks whether the object contains a duplicate of the supplied property which is
 * illegal in all instances of JSON objects in JSON-LD syntax
 *
 * @param object object to check from
 * @param key string key to check if a duplicate exists
 */
export declare const isDuplicatePropertyInObject: (object: ObjectASTNode, key: string) => boolean;
/**
 * Checks whether an object contains duplicate alias properties
 *
 * Example - If an object contains both an `@id` and `id` property
 *
 * @param object object to check from
 * @param key string key to check if the duplicate aliased property exists
 */
export declare const isDuplicateAliasedPropertyInObject: (object: ObjectASTNode, key: string) => boolean;
