"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Async = require("./async");
class Pipeline {
    constructor(current) {
        this.current = current;
    }
    static start() {
        return new Pipeline(Promise.resolve({}));
    }
    //add<T,U>(factory: Async.IFactory<T,U> | Async.FactoryFunc<T,U>, val: Parti (p:P) => Partial<T>)
    addValues(val) {
        return new Pipeline(this.current.then((c) => __awaiter(this, void 0, void 0, function* () {
            const v = typeof val === "function"
                ? yield Async.lift(val(c))
                : val;
            return Object.assign(Object.assign({}, c), v);
        })));
    }
    // NOTE: want to combine all addFactory() methods, but
    // Typescript and or ts-node seems to have problems
    // also want use object { key: partial } instead
    // but can't get the types right
    addFactoryFunc(factory, key, partial) {
        return new Pipeline(this.current.then((c) => __awaiter(this, void 0, void 0, function* () {
            const p = typeof partial === "function"
                ? yield Async.lift(partial(c))
                : partial;
            const val = yield factory(p);
            const newV = {};
            newV[key] = val;
            return Object.assign(Object.assign({}, c), newV);
        })));
    }
    addFactory(factory, key, partial) {
        return this.addFactoryFunc(((v) => factory.build(v)), key, partial);
    }
    addTxFactory(factory, key, partial) {
        return this.addFactoryFunc(((v) => factory.build(v)), key, partial);
    }
    then(onfulfilled, onrejected) {
        return this.current.then(onfulfilled, onrejected);
    }
}
exports.Pipeline = Pipeline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGlwZWxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBaUM7QUFZakMsTUFBYSxRQUFRO0lBQ25CLFlBQW9CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7SUFBRyxDQUFDO0lBRTNDLE1BQU0sQ0FBQyxLQUFLO1FBQ1YsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGlHQUFpRztJQUMxRixTQUFTLENBQ2QsR0FBNEI7UUFFNUIsT0FBTyxJQUFJLFFBQVEsQ0FDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBTSxDQUFDLEVBQUMsRUFBRTtZQUMxQixNQUFNLENBQUMsR0FDTCxPQUFPLEdBQUcsS0FBSyxVQUFVO2dCQUN2QixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFFLEdBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDVix1Q0FDTSxDQUFTLEdBQ1QsQ0FBUyxFQUNiO1FBQ0osQ0FBQyxDQUFBLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELHNEQUFzRDtJQUN0RCxtREFBbUQ7SUFDbkQsZ0RBQWdEO0lBQ2hELGdDQUFnQztJQUN6QixjQUFjLENBQ25CLE9BQW9DLEVBQ3BDLEdBQU0sRUFDTixPQUEwRTtRQUUxRSxPQUFPLElBQUksUUFBUSxDQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFNLENBQUMsRUFBQyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxHQUNMLE9BQU8sT0FBTyxLQUFLLFVBQVU7Z0JBQzNCLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUUsT0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2QsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxJQUFJLEdBQU8sRUFBRSxDQUFDO1lBQ25CLElBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDekIsdUNBQ00sQ0FBUyxHQUNWLElBQUksRUFDUDtRQUNKLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxVQUFVLENBQ2YsT0FBNkIsRUFDN0IsR0FBTSxFQUNOLE9BQTBFO1FBRTFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FDeEIsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBUSxFQUNyQyxHQUFHLEVBQ0gsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRU0sWUFBWSxDQUNqQixPQUF5QyxFQUN6QyxHQUFNLEVBQ04sT0FBMEU7UUFFMUUsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUN4QixDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFRLEVBQ3JDLEdBQUcsRUFDSCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQ0YsV0FBNEQsRUFDNUQsVUFBOEQ7UUFFOUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBakZELDRCQWlGQyJ9