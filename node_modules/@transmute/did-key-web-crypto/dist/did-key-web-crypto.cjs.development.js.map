{"version":3,"file":"did-key-web-crypto.cjs.development.js","sources":["../src/constants/index.ts","../src/crypto.ts","../src/functions/generate.ts","../src/functions/jwkToBase58.ts","../src/functions/getMultibaseFromJwk.ts","../src/functions/fingerprintToDid.ts","../src/functions/fromJwk.ts","../src/Jwe/Jwe.ts","../src/Jws/Jws.ts","../src/functions/base58KeyPairToJwk.ts","../src/functions/getJwkTypeFromMultibase.ts","../src/functions/toJwkPair.ts","../src/KeyPair.ts","../src/driver.ts"],"sourcesContent":["// See https://github.com/multiformats/multicodec/pull/190\n\nexport const SUPPORTED_EC = [\n  'P-256',\n  'P-384',\n  'P-521',\n  // not currently supported by web crypto\n  // 'Ed448', 'X448'\n];\n\nexport const multicodecPrefix = 0x12;\n\nexport const crvToMulticodecPrefix: any = {\n  'P-256': 0x00,\n  'P-384': 0x01,\n  'P-521': 0x02,\n  // Ed448: 0x03,\n  // X448: 0x04,\n};\n\nexport const multicodecToJwkType: any = {\n  0x00: { kty: 'EC', crv: 'P-256' },\n  0x01: { kty: 'EC', crv: 'P-384' },\n  0x02: { kty: 'EC', crv: 'P-521' },\n  // 0x03: { kty: 'OKP', crv: 'Ed448' },\n  // 0x04: { kty: 'OKP', crv: 'X448' },\n};\n\nexport const crvToJwsAlg: any = {\n  'P-256': 'ES256',\n  'P-384': 'ES384',\n  'P-521': 'ES521',\n};\n\nexport const crvToJwsHashAlg: any = {\n  'P-256': 'SHA-256',\n  'P-384': 'SHA-384',\n  'P-521': 'SHA-512',\n};\n","import { Crypto } from '@peculiar/webcrypto';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined' &&\n    typeof window !== undefined\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","import { SUPPORTED_EC } from '../constants';\nimport crypto from '../crypto';\n\nexport interface GenerateOptions {\n  kty: string;\n  crvOrSize: string;\n}\n\nexport const generate = async (\n  options: GenerateOptions = { kty: 'EC', crvOrSize: 'P-256' }\n) => {\n  if (options.kty === 'EC' && SUPPORTED_EC.indexOf(options.crvOrSize) !== -1) {\n    let kp = await crypto.subtle.generateKey(\n      {\n        name: 'ECDSA',\n        namedCurve: options.crvOrSize,\n      },\n      true,\n      ['sign', 'verify']\n    );\n    const jwk = await crypto.subtle.exportKey('jwk', kp.privateKey);\n    return {\n      publicKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n      },\n      privateKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        d: jwk.d,\n      },\n    };\n  }\n\n  throw new Error(\n    `Generate does not support ${options.kty} and ${options.crvOrSize}`\n  );\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const jwkToBase58 = (jwk: any): types.LinkedDataKeyPair => {\n  let keypair: any = {};\n  if (jwk.d) {\n    keypair.privateKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.d)])\n    );\n  }\n  if (jwk.x) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x)])\n    );\n  }\n  if (jwk.x && jwk.y) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x), base64url.toBuffer(jwk.y)])\n    );\n  }\n\n  return keypair;\n};\n","import bs58 from 'bs58';\n\nimport { crvToMulticodecPrefix } from '../constants';\nimport { jwkToBase58 } from './jwkToBase58';\n\nexport const getMultibaseFromJwk = (publicKeyJwk: any): string => {\n  const { publicKeyBase58 } = jwkToBase58(publicKeyJwk);\n  const publicKeyBytes = bs58.decode(publicKeyBase58);\n  const prefix = crvToMulticodecPrefix[publicKeyJwk.crv];\n  const buffer = new Uint8Array(3 + publicKeyBytes.length);\n  // https://github.com/multiformats/multicodec/pull/190\n  buffer[0] = 0x12;\n  buffer[1] = prefix;\n  buffer[2] = 0x01;\n  buffer.set(publicKeyBytes, 3);\n  // prefix with `z` to indicate multi-base base58btc encoding\n  return `z${bs58.encode(buffer)}`;\n};\n","export const fingerprintToDid = (fingerprint: string, methodName = 'key') => {\n  return `did:${methodName}:${fingerprint}`;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { jwkToBase58 } from './jwkToBase58';\nimport { getMultibaseFromJwk } from './getMultibaseFromJwk';\nimport { fingerprintToDid } from './fingerprintToDid';\n\nexport const fromJwk = (jwk: any): types.LinkedDataKeyPair => {\n  const id = getMultibaseFromJwk(jwk);\n  const controller = fingerprintToDid(id);\n  return {\n    id: `#${id}`,\n    type: 'JsonWebKey2020',\n    controller,\n    ...(jwkToBase58(jwk) as any),\n  };\n};\n","import crypto from '../crypto';\n\nexport const deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  // console.log(privateKeyJwk, publicKeyJwk);\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n","import crypto from '../crypto';\nimport { Jws } from '@transmute/did-key-common';\n\nimport { crvToJwsHashAlg } from '../constants';\n\nconst { createJws, verifyJws, createDetachedJws, verifyDetachedJws } = Jws;\n\nexport { createJws, verifyJws, createDetachedJws, verifyDetachedJws };\n\nexport const privateKeyToSigner = async (privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['sign']\n  );\n\n  return {\n    sign: async (data: Buffer) => {\n      const signature = await crypto.subtle.sign(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[privateKeyJwk.crv] },\n        },\n        privateKey,\n        data\n      );\n      return signature as Buffer;\n    },\n  };\n};\n\nexport const publicKeyToVerifier = async (publicKeyJwk: any) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['verify']\n  );\n\n  return {\n    verify: async (toBeVerified: Buffer, signature: Buffer) => {\n      const verified = await crypto.subtle.verify(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[publicKeyJwk.crv] },\n        },\n        publicKey,\n        signature,\n        toBeVerified\n      );\n      return verified;\n    },\n  };\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const base58KeyPairToJwk = (\n  keypair: types.LinkedDataKeyPair\n): object => {\n  const publicKeyBuffer = bs58.decode(keypair.publicKeyBase58);\n\n  const x = base64url.encode(\n    publicKeyBuffer.slice(0, publicKeyBuffer.length / 2)\n  );\n\n  const y = base64url.encode(publicKeyBuffer.slice(publicKeyBuffer.length / 2));\n\n  let jwk: any = { x, y };\n\n  if (keypair.privateKeyBase58) {\n    jwk.d = base64url.encode(bs58.decode(keypair.privateKeyBase58));\n  }\n\n  return jwk;\n};\n","import bs58 from 'bs58';\nimport { multicodecToJwkType } from '../constants';\nexport const getJwkTypeFromMultibase = (fingerprint: string) => {\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (buffer[0] !== 0x12) {\n    throw new Error(`Unsupported multibase ${buffer[0].toString(16)}`);\n  }\n\n  const type = multicodecToJwkType[buffer[1]];\n  if (!type) {\n    throw new Error(\n      `Unsupported multibase ${buffer[0].toString(16)} ${buffer[1].toString(\n        16\n      )}`\n    );\n  }\n  return type;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { base58KeyPairToJwk } from './base58KeyPairToJwk';\nimport { getJwkTypeFromMultibase } from './getJwkTypeFromMultibase';\nexport const toJwkPair = (\n  keypair: types.LinkedDataKeyPair\n): types.JsonWebKeyPair => {\n  // console.log('toJwkPair', keypair);\n  const id = keypair.id.substring(keypair.id.indexOf('#') + 1);\n  let _keypair: any = {\n    id: keypair.id,\n    type: 'JsonWebKey2020',\n    controller: keypair.controller,\n  };\n\n  _keypair.publicKeyJwk = {\n    ...getJwkTypeFromMultibase(id),\n    ...base58KeyPairToJwk({\n      publicKeyBase58: keypair.publicKeyBase58,\n    } as any),\n  };\n\n  if (keypair.privateKeyBase58) {\n    _keypair.privateKeyJwk = {\n      ...getJwkTypeFromMultibase(id),\n      ...base58KeyPairToJwk({\n        publicKeyBase58: keypair.publicKeyBase58,\n        privateKeyBase58: keypair.privateKeyBase58,\n      } as any),\n    };\n  }\n\n  return _keypair;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { generate } from './functions/generate';\nimport { fromJwk } from './functions/fromJwk';\n\nimport { deriveSecret } from './Jwe';\nimport { privateKeyToSigner, publicKeyToVerifier } from './Jws';\nimport { toJwkPair } from './functions/toJwkPair';\nimport { fingerprintToDid } from './functions/fingerprintToDid';\nimport { getJwkTypeFromMultibase } from './functions/getJwkTypeFromMultibase';\n\nimport { types } from '@transmute/did-key-common';\n\nimport {\n  getEpkGenerator,\n  deriveKey,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\n/* class decorator */\nfunction staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n}\n\nconst KEY_TYPE = 'JsonWebKey2020';\n\n@staticImplements<types.KeyAgreementKeyPairClass>()\nexport class KeyPair implements types.KeyAgreementKeyPairInstance {\n  public static JWE_ALG: types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static generate = async (options?: any) => {\n    const { privateKeyJwk } = await generate(options);\n    return new KeyPair({ ...fromJwk(privateKeyJwk) });\n  };\n\n  static from = (options?: any) => {\n    return new KeyPair({ ...options });\n  };\n\n  static fromFingerprint = async ({ fingerprint }: any) => {\n    const data = getJwkTypeFromMultibase(fingerprint);\n    if (data.kty) {\n      const publicKeyBytes = bs58.decode(fingerprint.substring(1));\n\n      const publicKeyBase58 = bs58.encode(publicKeyBytes.slice(3));\n\n      return new KeyPair({\n        id: '#' + fingerprint,\n        controller: fingerprintToDid(fingerprint),\n        type: 'JsonWebKey2020',\n        publicKeyBase58,\n      });\n    }\n    throw new Error('Cannot create key from fingerprint ' + fingerprint);\n  };\n\n  static fingerprintFromPublicKey(\n    keypair: types.KeyPairJwk | types.KeyPairBase58\n  ) {\n    let kp = KeyPair.from(keypair);\n    return kp.id.substring(1);\n  }\n\n  static async generateEphemeralKeyPair(\n    epkArgs: any\n  ): Promise<types.EpkResult> {\n    return getEpkGenerator(KeyPair, epkArgs)();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = new KeyPair({\n      publicKeyJwk: epk,\n    } as any);\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = ephemeralPublicKey.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey.toJsonWebKeyPair(),\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    if (staticPublicKey.type !== KEY_TYPE) {\n      throw new Error(`\"staticPublicKey.type\" must be \"${KEY_TYPE}\".`);\n    }\n\n    const epkPair = await KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  public id: string;\n  public type: string;\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'JsonWebKey2020';\n\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      const args = fromJwk(options.publicKeyJwk);\n      this.publicKeyBuffer = bs58.decode(args.publicKeyBase58);\n      this.id = options.id || args.id;\n      this.controller = args.controller;\n    } else {\n      throw new Error('publicKeyJwk or publicKeyBase58 is required.');\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    } else if (options.privateKeyJwk) {\n      const { privateKeyBase58 } = fromJwk(options.privateKeyJwk);\n      this.privateKeyBuffer = bs58.decode(privateKeyBase58);\n    }\n  }\n\n  fingerprint() {\n    const { id } = this.toJsonWebKeyPair();\n    return id.substring(1);\n  }\n\n  toKeyPair(exportPrivateKey = false) {\n    let options: any = {\n      id: this.id,\n      type: 'UnsupportedVerificationMethod2020',\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivateKey) {\n      options.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return options;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const options = this.toKeyPair(exportPrivateKey);\n    return toJwkPair(options);\n  }\n\n  async signer() {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    return privateKeyToSigner(privateKeyJwk);\n  }\n\n  async verifier() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair();\n    return publicKeyToVerifier(publicKeyJwk);\n  }\n\n  deriveSecret(options: types.DeriveSecretOptions) {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    let publicKeyJwk;\n\n    if ((options.publicKey as any).publicKeyJwk) {\n      publicKeyJwk = (options.publicKey as any).publicKeyJwk;\n    } else if ((options.publicKey as any).publicKeyBase58) {\n      ({ publicKeyJwk } = toJwkPair(options.publicKey as any));\n    } else {\n      throw new Error(\n        'Cannot deriveSecret from remote... publicKeyJwk or publicKeyBase58 must be present.'\n      );\n    }\n    return deriveSecret(privateKeyJwk, publicKeyJwk);\n  }\n}\n","import { getResolve, getGet } from '@transmute/did-key-common';\n\nimport { KeyPair } from './KeyPair';\n\nexport const resolve = getResolve(KeyPair);\nexport const get = getGet(resolve);\n"],"names":["SUPPORTED_EC","crvToMulticodecPrefix","multicodecToJwkType","kty","crv","crvToJwsHashAlg","isNodejs","process","versions","node","window","undefined","crypto","Crypto","generate","options","crvOrSize","Error","indexOf","subtle","generateKey","name","namedCurve","kp","exportKey","privateKey","jwk","publicKeyJwk","x","y","privateKeyJwk","d","jwkToBase58","keypair","privateKeyBase58","bs58","encode","Buffer","concat","base64url","toBuffer","publicKeyBase58","getMultibaseFromJwk","publicKeyBytes","decode","prefix","buffer","Uint8Array","length","set","fingerprintToDid","fingerprint","methodName","fromJwk","id","controller","type","deriveSecret","importKey","publicKey","deriveBits","result","createJws","Jws","verifyJws","createDetachedJws","privateKeyToSigner","sign","data","hash","publicKeyToVerifier","verify","toBeVerified","signature","base58KeyPairToJwk","publicKeyBuffer","slice","getJwkTypeFromMultibase","substring","toString","toJwkPair","_keypair","staticImplements","constructor","KEY_TYPE","KeyPair","args","privateKeyBuffer","fingerprintFromPublicKey","KeyPair_1","from","generateEphemeralKeyPair","epkArgs","getEpkGenerator","kekFromEphemeralPeer","keyAgreementKey","epk","TypeError","ephemeralPublicKey","producerInfo","consumerInfo","toJsonWebKeyPair","secret","deriveKey","keyData","KeyEncryptionKey","createKek","kek","kekFromStaticPeer","ephemeralKeyPair","staticPublicKey","epkPair","apu","apv","toKeyPair","exportPrivateKey","signer","verifier","resolve","getResolve","get","getGet"],"mappings":"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"}