/// <reference types="node" />
import { types } from '@transmute/did-key-common';
import { KeyEncryptionKey } from '@transmute/did-key-cipher';
export declare class KeyPair implements types.KeyAgreementKeyPairInstance {
    static JWE_ALG: types.ECDH_ES_A256KW;
    static generate: (options?: any) => Promise<KeyPair>;
    static from: (options?: any) => KeyPair;
    static fromFingerprint: ({ fingerprint }: any) => Promise<KeyPair>;
    static fingerprintFromPublicKey(keypair: types.KeyPairJwk | types.KeyPairBase58): string;
    static generateEphemeralKeyPair(epkArgs: any): Promise<types.EpkResult>;
    static kekFromEphemeralPeer({ keyAgreementKey, epk, }: types.KeyEncryptionKeyFromEphemeralPublicKeyOptions): Promise<{
        kek: KeyEncryptionKey;
    }>;
    static kekFromStaticPeer({ ephemeralKeyPair, staticPublicKey, }: types.KeyEncryptionKeyFromStaticPublicKeyOptions): Promise<{
        kek: KeyEncryptionKey;
        epk: any;
        apu: string;
        apv: string;
    }>;
    id: string;
    type: string;
    controller: string;
    publicKeyBuffer: Buffer;
    privateKeyBuffer?: Buffer;
    constructor(options: any);
    fingerprint(): string;
    toKeyPair(exportPrivateKey?: boolean): any;
    toJsonWebKeyPair(exportPrivateKey?: boolean): types.JsonWebKeyPair;
    signer(): Promise<{
        sign: (data: Buffer) => Promise<Buffer>;
    }>;
    verifier(): Promise<{
        verify: (toBeVerified: Buffer, signature: Buffer) => Promise<boolean>;
    }>;
    deriveSecret(options: types.DeriveSecretOptions): Promise<Uint8Array>;
}
