{"version":3,"file":"ed25519-signature-2018.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/constants.ts","../src/Ed25519Signature2018.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","const { constants: securityConstants } = require('security-context');\n\nconst constants = {\n  // leave commented out, changing this will break compatability\n  // with digital bazaar\n  // SECURITY_CONTEXT_URL: 'https://w3id.org/security/v3',\n  SECURITY_CONTEXT_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_CONTEXT_V1_URL: securityConstants.SECURITY_CONTEXT_V1_URL,\n  SECURITY_CONTEXT_V2_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_PROOF_URL: 'https://w3id.org/security#proof',\n  SECURITY_SIGNATURE_URL: 'https://w3id.org/security#signature',\n};\n\nexport default constants;\n","import jsonld from 'jsonld';\nimport constants from './constants';\nimport crypto from 'crypto';\n\nimport { Ed25519KeyPair, EdDSA, keyUtils } from '@transmute/did-key-ed25519';\n\nconst sha256 = (data: any) => {\n  const h = crypto.createHash('sha256');\n  h.update(data);\n  return h.digest();\n};\n\nexport interface IEd25519Signature2018Options {\n  key?: any;\n  date?: any;\n  signer?: any;\n}\n\nexport class Ed25519Signature2018 {\n  public useNativeCanonize: boolean = false;\n  public key: any;\n  public proof: any;\n  public date: any;\n  public creator: any;\n  public type: string = 'Ed25519Signature2018';\n  public signer: any;\n  public verifier: any;\n  public verificationMethod?: string;\n  constructor(options: IEd25519Signature2018Options = {}) {\n    this.signer = options.signer;\n    this.date = options.date;\n    if (options.key) {\n      this.key = options.key;\n      this.verificationMethod = this.key.id;\n      this.signer = {\n        sign: async ({ data }: any) => {\n          const header = {\n            alg: 'EdDSA',\n            b64: false,\n            crit: ['b64'],\n          };\n          const payload = Buffer.from(data);\n          const { privateKeyJwk } = await this.key.toJsonWebKeyPair(true);\n          const _jws = await EdDSA.signDetached(payload, privateKeyJwk, header);\n          return _jws;\n        },\n      };\n\n      this.verifier = {\n        verify: async ({ data, signature }: any) => {\n          let verified = false;\n          try {\n            verified = await EdDSA.verifyDetached(\n              signature,\n              data,\n              keyUtils.publicKeyJwkFromPublicKeyBase58(this.key.publicKeyBase58)\n            );\n          } catch (e) {\n            console.error('An error occurred when verifying signature: ', e);\n          }\n          return verified;\n        },\n      };\n    }\n  }\n\n  async canonize(\n    input: any,\n    { documentLoader, expansionMap, skipExpansion }: any\n  ) {\n    return jsonld.canonize(input, {\n      algorithm: 'URDNA2015',\n      format: 'application/n-quads',\n      documentLoader,\n      expansionMap,\n      skipExpansion,\n      useNative: this.useNativeCanonize,\n    });\n  }\n\n  async canonizeProof(proof: any, { documentLoader, expansionMap }: any) {\n    // `jws`,`signatureValue`,`proofValue` must not be included in the proof\n    // options\n    proof = { ...proof };\n    delete proof.jws;\n    delete proof.signatureValue;\n    delete proof.proofValue;\n    return this.canonize(proof, {\n      documentLoader,\n      expansionMap,\n      skipExpansion: false,\n    });\n  }\n\n  async createVerifyData({\n    document,\n    proof,\n    documentLoader,\n    expansionMap,\n  }: any) {\n    // concatenate hash of c14n proof options and hash of c14n document\n    const c14nProofOptions = await this.canonizeProof(proof, {\n      documentLoader,\n      expansionMap,\n    });\n    const c14nDocument = await this.canonize(document, {\n      documentLoader,\n      expansionMap,\n    });\n    return Buffer.concat([sha256(c14nProofOptions), sha256(c14nDocument)]);\n  }\n\n  async matchProof({\n    proof,\n  }: // document,\n  // purpose,\n  // documentLoader,\n  // expansionMap,\n  any) {\n    return proof.type === this.type;\n  }\n\n  async updateProof({ proof }: any) {\n    // extending classes may do more\n    return proof;\n  }\n\n  async sign({ verifyData, proof }: any) {\n    if (!(this.signer && typeof this.signer.sign === 'function')) {\n      throw new Error('A signer API has not been specified.');\n    }\n\n    const detachedJws = await this.signer.sign({ data: verifyData });\n    proof.jws = detachedJws;\n    return proof;\n  }\n\n  async createProof({\n    document,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: any) {\n    // build proof (currently known as `signature options` in spec)\n    let proof;\n    if (this.proof) {\n      // use proof JSON-LD document passed to API\n      proof = await jsonld.compact(this.proof, constants.SECURITY_CONTEXT_URL, {\n        documentLoader,\n        expansionMap,\n        compactToRelative: false,\n      });\n    } else {\n      // create proof JSON-LD document\n      proof = { '@context': constants.SECURITY_CONTEXT_URL };\n    }\n\n    // ensure proof type is set\n    proof.type = this.type;\n\n    // set default `now` date if not given in `proof` or `options`\n    let date = this.date;\n    if (proof.created === undefined && date === undefined) {\n      date = new Date();\n    }\n\n    // ensure date is in string format\n    if (date !== undefined && typeof date !== 'string') {\n      date = new Date(date).toISOString();\n    }\n\n    // add API overrides\n    if (date !== undefined) {\n      proof.created = date;\n    }\n    // `verificationMethod` is for newer suites, `creator` for legacy\n    if (this.verificationMethod !== undefined) {\n      proof.verificationMethod = this.verificationMethod;\n    }\n    if (this.creator !== undefined) {\n      proof.creator = this.creator;\n    }\n\n    // add any extensions to proof (mostly for legacy support)\n    proof = await this.updateProof({\n      document,\n      proof,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof,\n    });\n\n    // allow purpose to update the proof; the `proof` is in the\n    // SECURITY_CONTEXT_URL `@context` -- therefore the `purpose` must\n    // ensure any added fields are also represented in that same `@context`\n    proof = await purpose.update(proof, {\n      document,\n      suite: this,\n      documentLoader,\n      expansionMap,\n    });\n\n    // create data to sign\n    const verifyData = await this.createVerifyData({\n      document,\n      proof,\n      documentLoader,\n      expansionMap,\n      compactProof,\n    });\n\n    // sign data\n    proof = await this.sign({\n      verifyData,\n      document,\n      proof,\n      documentLoader,\n      expansionMap,\n    });\n\n    return proof;\n  }\n\n  async getVerificationMethod({ proof, documentLoader }: any) {\n    let { verificationMethod } = proof;\n\n    if (!verificationMethod) {\n      // backwards compatibility support for `creator`\n      const { creator } = proof;\n      verificationMethod = creator;\n    }\n\n    if (typeof verificationMethod === 'object') {\n      verificationMethod = verificationMethod.id;\n    }\n\n    if (!verificationMethod) {\n      throw new Error('No \"verificationMethod\" or \"creator\" found in proof.');\n    }\n\n    // Note: `expansionMap` is intentionally not passed; we can safely drop\n    // properties here and must allow for it\n    const framed = await jsonld.frame(\n      verificationMethod,\n      {\n        // '@context': constants.SECURITY_CONTEXT_URL,\n        '@context': constants.SECURITY_CONTEXT_URL,\n        '@embed': '@always',\n        id: verificationMethod,\n      },\n      { documentLoader, compactToRelative: false }\n    );\n\n    if (!framed) {\n      throw new Error(`Verification method ${verificationMethod} not found.`);\n    }\n\n    // ensure verification method has not been revoked\n    if (framed.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.');\n    }\n\n    return framed;\n  }\n\n  async verifySignature({ verifyData, verificationMethod, proof }: any) {\n    let { verifier } = this;\n    if (!verifier) {\n      const key = await Ed25519KeyPair.from(verificationMethod);\n      // this suite relies on detached JWS....\n      // so we need to make sure thats the signature format we are verifying.\n      verifier = {\n        verify: async ({ data, signature }: any) => {\n          let verified = false;\n          const { publicKeyJwk } = await key.toJsonWebKeyPair(false);\n          try {\n            verified = await EdDSA.verifyDetached(\n              signature,\n              data,\n              publicKeyJwk\n            );\n          } catch (e) {\n            console.error('An error occurred when verifying signature: ', e);\n          }\n          return verified;\n        },\n      };\n    }\n    return verifier.verify({ data: verifyData, signature: proof.jws });\n  }\n\n  async verifyProof({\n    proof,\n    document,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: any) {\n    try {\n      // create data to verify\n      const verifyData = await this.createVerifyData({\n        document,\n        proof,\n        documentLoader,\n        expansionMap,\n        compactProof,\n      });\n\n      // fetch verification method\n      const verificationMethod = await this.getVerificationMethod({\n        proof,\n        document,\n        documentLoader,\n        expansionMap,\n      });\n\n      // verify signature on data\n      const verified = await this.verifySignature({\n        verifyData,\n        verificationMethod,\n        document,\n        proof,\n        documentLoader,\n        expansionMap,\n      });\n      if (!verified) {\n        throw new Error('Invalid signature.');\n      }\n\n      // ensure proof was performed for a valid purpose\n      const purposeResult = await purpose.validate(proof, {\n        document,\n        suite: this,\n        verificationMethod,\n        documentLoader,\n        expansionMap,\n      });\n\n      // console.log(purposeResult);\n\n      if (!purposeResult.valid) {\n        throw purposeResult.error;\n      }\n\n      return { verified: true, purposeResult };\n    } catch (error) {\n      return { verified: false, error };\n    }\n  }\n}\n"],"names":["_catch","body","recover","result","e","then","Symbol","iterator","asyncIterator","securityConstants","require","constants","SECURITY_CONTEXT_URL","SECURITY_CONTEXT_V2_URL","SECURITY_CONTEXT_V1_URL","SECURITY_PROOF_URL","SECURITY_SIGNATURE_URL","sha256","data","h","crypto","createHash","update","digest","Ed25519Signature2018","options","this","signer","date","key","verificationMethod","id","sign","header","alg","b64","crit","payload","Buffer","from","_this","toJsonWebKeyPair","EdDSA","signDetached","privateKeyJwk","verifier","verify","signature","verified","verifyDetached","keyUtils","publicKeyJwkFromPublicKeyBase58","_this2","publicKeyBase58","console","error","canonize","input","documentLoader","expansionMap","skipExpansion","jsonld","algorithm","format","useNative","useNativeCanonize","canonizeProof","proof","jws","signatureValue","proofValue","createVerifyData","document","_this8","c14nProofOptions","c14nDocument","concat","matchProof","type","updateProof","verifyData","Error","detachedJws","createProof","purpose","compactProof","_this14","undefined","created","Date","toISOString","creator","suite","compact","compactToRelative","getVerificationMethod","frame","framed","revoked","verifySignature","Ed25519KeyPair","publicKeyJwk","verifyProof","_this18","validate","purposeResult","valid"],"mappings":"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"}