{"version":3,"file":"linked-data-proof.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/constants.ts","../src/strictExpansionMap.ts","../src/ProofSet.ts","../src/getTypeInfo.ts","../src/VerificationError.ts","../src/sign.ts","../src/verify.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","const { constants: securityConstants } = require('security-context');\n\nexport default {\n  SECURITY_CONTEXT_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_CONTEXT_V1_URL: securityConstants.SECURITY_CONTEXT_V1_URL,\n  SECURITY_CONTEXT_V2_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_CONTEXT_V3_URL: 'https://w3id.org/security/v3-unstable',\n  SECURITY_PROOF_URL: 'https://w3id.org/security#proof',\n  SECURITY_SIGNATURE_URL: 'https://w3id.org/security#signature',\n};\n","// strict expansion map disallows dropping properties when expanding by default\nexport default (info: any) => {\n  if (info.unmappedProperty) {\n    throw new Error(\n      `The property \"${info.unmappedProperty}\" in the input was not defined in the context.`\n    );\n  }\n};\n","import jsonld from 'jsonld';\nimport { serializeError } from 'serialize-error';\nimport constants from './constants';\nimport strictExpansionMap from './strictExpansionMap';\nimport getTypeInfo from './getTypeInfo';\n\nimport { IProofSetAddOptions } from './types';\n\nexport class ProofSet {\n  async add(\n    document: any,\n    {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof = true,\n    }: IProofSetAddOptions = { compactProof: true }\n  ) {\n    if (!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if (!documentLoader) {\n      throw new TypeError('\"options.documentLoader\" is required.');\n    }\n    if (!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n\n    if (suite.legacy) {\n      throw new TypeError(`Legacy suites are no longer supported.`);\n    }\n\n    if (expansionMap !== false) {\n      expansionMap = strictExpansionMap;\n    }\n\n    if (typeof document === 'string') {\n      // fetch document\n      document = await documentLoader(document);\n    }\n\n    // preprocess document to prepare to remove existing proofs\n    let input;\n    if (compactProof) {\n      // cannot assume security context terms, so do full compaction\n      input = await jsonld.compact(document, constants.SECURITY_CONTEXT_URL, {\n        documentLoader,\n        expansionMap,\n        compactToRelative: false,\n      });\n    } else {\n      // TODO: optimize to modify document in place to maximize optimization\n\n      // shallow copy document to allow removal of existing proofs\n      input = { ...document };\n    }\n\n    // save but exclude any existing proof(s)\n    const proofProperty = suite.legacy ? 'signature' : 'proof';\n    //const existingProofs = input[proofProperty];\n    delete input[proofProperty];\n\n    // create the new proof (suites MUST output a proof using the security-v2\n    // `@context`)\n    const proof = await suite.createProof({\n      document: input,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof,\n    });\n\n    if (compactProof) {\n      // compact proof to match document's context\n      let expandedProof;\n      if (suite.legacy) {\n        expandedProof = {\n          [constants.SECURITY_SIGNATURE_URL]: proof,\n        };\n      } else {\n        expandedProof = {\n          [constants.SECURITY_PROOF_URL]: { '@graph': proof },\n        };\n      }\n      // account for type-scoped `proof` definition by getting document types\n      const { types, alias } = await getTypeInfo({\n        document,\n        documentLoader,\n        expansionMap,\n      });\n      expandedProof['@type'] = types;\n      const ctx = jsonld.getValues(document, '@context');\n      const compactProof = await jsonld.compact(expandedProof, ctx, {\n        documentLoader,\n        expansionMap,\n        compactToRelative: false,\n      });\n      delete compactProof[alias];\n      delete compactProof['@context'];\n\n      // add proof to document\n      const key = Object.keys(compactProof)[0];\n      jsonld.addValue(document, key, compactProof[key]);\n    } else {\n      // in-place restore any existing proofs\n      /*if(existingProofs) {\n            document[proofProperty] = existingProofs;\n          }*/\n      // add new proof\n      delete proof['@context'];\n      jsonld.addValue(document, proofProperty, proof);\n    }\n\n    return document;\n  }\n\n  private _getProofs = async ({\n    document,\n    legacy,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: any) => {\n    // handle document preprocessing to find proofs\n    const proofProperty = legacy ? 'signature' : 'proof';\n    let proofSet;\n\n    if (compactProof) {\n      // if we must compact the proof(s) then we must first compact the input\n      // document to find the proof(s)\n      document = await jsonld.compact(\n        document,\n        constants.SECURITY_CONTEXT_URL,\n        { documentLoader, expansionMap, compactToRelative: false }\n      );\n    }\n    proofSet = jsonld.getValues(document, proofProperty);\n    delete document[proofProperty];\n\n    if (proofSet.length === 0) {\n      // no possible matches\n      throw new Error('No matching proofs found in the given document.');\n    }\n\n    // TODO: consider in-place editing to optimize\n\n    // shallow copy proofs and add SECURITY_CONTEXT_URL\n    proofSet = proofSet.map((proof: any) => ({\n      '@context': constants.SECURITY_CONTEXT_URL,\n      ...proof,\n    }));\n\n    return { proofSet, document };\n  };\n\n  private _verify = async ({\n    document,\n    suites,\n    proofSet,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: any) => {\n    // filter out matching proofs\n    const result = await Promise.all(\n      proofSet.map((proof: any) =>\n        purpose.match(proof, { document, documentLoader, expansionMap })\n      )\n    );\n    const matches = proofSet.filter((_value: any, index: any) => result[index]);\n    if (matches.length === 0) {\n      // no matches, nothing to verify\n      return [];\n    }\n\n    // verify each matching proof\n    return (\n      await Promise.all(\n        matches.map(async (proof: any) => {\n          for (const s of suites) {\n            if (\n              await s.matchProof({\n                proof,\n                document,\n                documentLoader,\n                expansionMap,\n              })\n            ) {\n              return s\n                .verifyProof({\n                  proof,\n                  document,\n                  purpose,\n                  documentLoader,\n                  expansionMap,\n                  compactProof,\n                })\n                .catch((error: any) => ({ verified: false, error }));\n            }\n          }\n        })\n      )\n    )\n      .map((r: any, i) => {\n        if (!r) {\n          return null;\n        }\n        if (r.error) {\n          this._addToJSON(r.error);\n        }\n        return { proof: matches[i], ...r };\n      })\n      .filter((r) => r);\n  };\n\n  private _addToJSON = (error: any) => {\n    Object.defineProperty(error, 'toJSON', {\n      value: function() {\n        return serializeError(this);\n      },\n      configurable: true,\n      writable: true,\n    });\n  };\n\n  public verify = async (\n    document: any,\n    {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof = true,\n    }: any = {}\n  ) => {\n    if (!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if (!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n    const suites = Array.isArray(suite) ? suite : [suite];\n    if (suites.length === 0) {\n      throw new TypeError('At least one suite is required.');\n    }\n\n    const legacy = suites.some((s) => s.legacy);\n    if (legacy) {\n      throw new TypeError(`Legacy suites are no longer supported.`);\n    }\n\n    if (!documentLoader) {\n      throw new TypeError('\"options.documentLoader\" is required.');\n    }\n    if (expansionMap !== false) {\n      expansionMap = strictExpansionMap;\n    }\n\n    try {\n      if (typeof document === 'string') {\n        // fetch document\n        document = await documentLoader(document);\n      } else {\n        // TODO: consider in-place editing to optimize when `compactProof`\n        // is `false`\n\n        // shallow copy to allow for removal of proof set prior to canonize\n        document = { ...document };\n      }\n\n      // get proofs from document\n      const { proofSet, document: doc } = await this._getProofs({\n        document,\n        legacy,\n        documentLoader,\n        expansionMap,\n        compactProof,\n      });\n\n      document = doc;\n\n      // verify proofs\n      const results = await this._verify({\n        document,\n        suites,\n        proofSet,\n        purpose,\n        documentLoader,\n        expansionMap,\n        compactProof,\n      });\n\n      if (results.length === 0) {\n        throw new Error(\n          'Could not verify any proofs; no proofs matched the required ' +\n            'suite and purpose.'\n        );\n      }\n\n      // combine results\n      const verified = results.some((r) => r.verified);\n      if (!verified) {\n        const errors = [].concat(\n          ...results.filter((r) => r.error).map((r) => r.error)\n        );\n        const result: any = { verified, results };\n        if (errors.length > 0) {\n          result.error = errors;\n        }\n        return result;\n      }\n      return { verified, results };\n    } catch (error) {\n      this._addToJSON(error);\n      return { verified: false, error };\n    }\n  };\n}\n","import jsonld from 'jsonld';\n\nimport { IGetTypeInfoOptions } from './types';\n\nconst getTypeInfo = async ({\n  document,\n  documentLoader,\n  expansionMap,\n}: IGetTypeInfoOptions) => {\n  // determine `@type` alias, if any\n  const ctx = jsonld.getValues(document, '@context');\n  const compacted = await jsonld.compact({ '@type': '_:b0' }, ctx, {\n    documentLoader,\n    expansionMap,\n  });\n  delete compacted['@context'];\n  const alias = Object.keys(compacted)[0];\n\n  // optimize: expand only `@type` and `type` values\n  const toExpand: any = { '@context': ctx };\n  toExpand['@type'] = jsonld\n    .getValues(document, '@type')\n    .concat(jsonld.getValues(document, alias));\n  const expanded =\n    (await jsonld.expand(toExpand, { documentLoader, expansionMap }))[0] || {};\n  return { types: jsonld.getValues(expanded, '@type'), alias };\n};\n\nexport default getTypeInfo;\n","export class VerificationError extends Error {\n  public errors: any[];\n  constructor(errors: any) {\n    super('Verification error(s).');\n\n    this.name = 'VerificationError';\n    this.errors = [].concat(errors);\n  }\n}\n","import { ProofSet } from './ProofSet';\n\nimport { ISignOptions } from './types';\n\nexport const sign = async (\n  document: any,\n  {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: ISignOptions = {\n    compactProof: true,\n  }\n) => {\n  try {\n    return await new ProofSet().add(document, {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof,\n    });\n  } catch (e) {\n    if (!documentLoader && e.name === 'jsonld.InvalidUrl') {\n      const {\n        details: { url },\n      } = e;\n      const err: any = new Error(\n        `A URL \"${url}\" could not be fetched;` +\n          `you need to pass \"documentLoader\" or resolve the URL before calling \"sign\".`\n      );\n      err.cause = e;\n      throw err;\n    }\n    throw e;\n  }\n};\n","import { ProofSet } from './ProofSet';\nimport { VerificationError } from './VerificationError';\nimport { IVerifyOptions } from './types';\nexport const verify = async (\n  document: any,\n  {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  }: IVerifyOptions = {}\n) => {\n  const result = await new ProofSet().verify(document, {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof,\n  });\n  const { error } = result;\n  if (error) {\n    if (!documentLoader && error.name === 'jsonld.InvalidUrl') {\n      const {\n        details: { url },\n      } = error;\n      const urlError = new Error(\n        `A URL \"${url}\" could not be fetched; you need to pass ` +\n          '\"documentLoader\" or resolve the URL before calling \"verify\".'\n      );\n      result.error = new VerificationError(urlError);\n    } else {\n      result.error = new VerificationError(error);\n    }\n  }\n  return result;\n};\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","_catch","body","recover","asyncIterator","securityConstants","require","constants","SECURITY_CONTEXT_URL","SECURITY_CONTEXT_V2_URL","SECURITY_CONTEXT_V1_URL","SECURITY_CONTEXT_V3_URL","SECURITY_PROOF_URL","SECURITY_SIGNATURE_URL","info","unmappedProperty","Error","ProofSet","document","legacy","documentLoader","expansionMap","compactProof","proofSet","jsonld","getValues","proofProperty","length","map","proof","compact","compactToRelative","suites","purpose","Promise","all","match","matches","filter","_value","index","target","check","step","reject","_cycle","next","done","return","_fixup","TypeError","values","i","push","array","_forTo","matchProof","verifyProof","error","verified","_Promise$all","r","_addToJSON","Object","defineProperty","serializeError","configurable","writable","suite","Array","isArray","some","strictExpansionMap","_this2","_getProofs","_verify","results","errors","concat","add","input","createProof","expandedProof","ctx","compacted","alias","keys","toExpand","expand","types","_jsonld$expand","getTypeInfo","key","addValue","VerificationError","name","err","details","url","cause","verify","urlError"],"mappings":"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"}